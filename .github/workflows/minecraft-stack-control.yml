name: Minecraft Stack Control

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Start or stop a stack?"
        required: true
        type: choice
        options:
          - start
          - stop
      stack_name:
        description: "Which stack to start or stop?"
        required: true
        type: choice
        options:
          - Bens2ndServer
          - testlatestchanges

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2
  ROLE_NAME: GitHubActionsOIDCRole
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  control-stack:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Start selected stack
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          echo "Starting stack: ${{ github.event.inputs.stack_name }}"
          aws cloudformation update-stack \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --use-previous-template \
            --parameters ParameterKey=ServerState,ParameterValue=Running \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for start to complete
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          aws cloudformation wait stack-update-complete \
            --stack-name ${{ github.event.inputs.stack_name }}

      - name: Get Public IP of ECS Fargate task
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          CLUSTER_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --query "Stacks[0].Outputs[?OutputKey=='ECSClusterName'].OutputValue" \
            --output text)

          echo "Looking for running task in cluster: $CLUSTER_NAME"
          TASK_ARN=$(aws ecs list-tasks \
            --cluster "$CLUSTER_NAME" \
            --desired-status RUNNING \
            --query "taskArns[0]" \
            --output text)

          if [ "$TASK_ARN" == "None" ]; then
            echo "No running ECS task found."
            exit 1
          fi

          ENI_ID=$(aws ecs describe-tasks \
            --cluster "$CLUSTER_NAME" \
            --tasks "$TASK_ARN" \
            --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" \
            --output text)

          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids "$ENI_ID" \
            --query "NetworkInterfaces[0].Association.PublicIp" \
            --output text)

          echo "Minecraft Server is live at IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Notify Discord
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          MSG="Ben's Minecraft Server is live at \`$HOSTNAME ($PUBLIC_IP)\`"
          echo "Sending to Discord: $MSG"
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"$MSG\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}


      - name: Stop selected stack
        if: ${{ github.event.inputs.action == 'stop' }}
        run: |
          echo "Stopping stack: ${{ github.event.inputs.stack_name }}"
          aws cloudformation update-stack \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --use-previous-template \
            --parameters ParameterKey=ServerState,ParameterValue=Stopped \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for stop to complete
        if: ${{ github.event.inputs.action == 'stop' }}
        run: |
          aws cloudformation wait stack-update-complete \
            --stack-name ${{ github.event.inputs.stack_name }}
