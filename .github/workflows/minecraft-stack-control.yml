name: Minecraft Stack Control

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Start or stop a stack?"
        required: true
        type: choice
        options:
          - start
          - stop
      stack_name:
        description: "Which stack to start or stop?"
        required: true
        type: choice
        options:
          - Bens2ndServer
          - testlatestchanges

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2
  ROLE_NAME: GitHubActionsOIDCRole
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  control-stack:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Start selected stack
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          echo "Starting stack: ${{ github.event.inputs.stack_name }}"
          aws cloudformation update-stack \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --use-previous-template \
            --parameters ParameterKey=ServerState,ParameterValue=Running \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for start to complete
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          aws cloudformation wait stack-update-complete \
            --stack-name ${{ github.event.inputs.stack_name }}

      - name: Get Public DNS of started stack
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          STACK_NAME="${{ github.event.inputs.stack_name }}"
          ASG_NAME="${STACK_NAME}-asg"

          echo "Fetching instance ID from ASG: $ASG_NAME"
          INSTANCE_ID=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names $ASG_NAME \
            --query 'AutoScalingGroups[0].Instances[0].InstanceId' \
            --output text)

          if [ "$INSTANCE_ID" == "None" ]; then
            echo "No instance found in ASG: $ASG_NAME"
            exit 1
          fi

          DNS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)

          echo "Minecraft Server is live at: $DNS"

      - name: Stop selected stack
        if: ${{ github.event.inputs.action == 'stop' }}
        run: |
          echo "Stopping stack: ${{ github.event.inputs.stack_name }}"
          aws cloudformation update-stack \
            --stack-name ${{ github.event.inputs.stack_name }} \
            --use-previous-template \
            --parameters ParameterKey=ServerState,ParameterValue=Stopped \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for stop to complete
        if: ${{ github.event.inputs.action == 'stop' }}
        run: |
          aws cloudformation wait stack-update-complete \
            --stack-name ${{ github.event.inputs.stack_name }}
