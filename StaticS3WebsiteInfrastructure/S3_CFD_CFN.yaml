AWSTemplateFormatVersion: 2010-09-09

Description: Kays second project - S3 bucket plus cloudfront cloudformation template - MUST BE DEPLOYED IN US-EAST-1 or else it will fail!

Parameters: # Here is where you can name things, don't touch the rest of the script unless you know what you are doing :P 
  S3BucketName:
    Type: String
    Default: daydreaminginthecloud 
    Description: Enter the bucket name
  Route53HostedZoneID:
    Type: String 
    Default: PUBLICROUTE53HOSTEDZONEID 
    Description: The public hosted zone id from Route53 hardcoded into template for ease of validation.  Perhaps will look at GetAtt in future rendition
  DomainNameJoin:
    Type: String
    Default: 'daydreaminginthecloud.bearynatural.dev'
    Description: Insert Sub-domain.DomainName.TopLevelDomain
  OACforCloudFront:
    Type: String
    Default: 'OACforCloudFront'
    Description: Insert Sub-domain.DomainName.TopLevelDomain


Resources:
  privateS3bucket: #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref S3BucketName
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Department
          Value: Project 2
        - Key: Description
          Value: Private bucket
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DeletionPolicy: Delete

  s3BucketPolicy: #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html#aws-properties-s3-policy-bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${privateS3bucket}
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          Sid: AllowCloudFrontServicePrincipalReadOnly
          Effect: Allow
          Principal: 
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource: !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref S3BucketName
              - /*
          Condition:
            StringEquals:
              AWS:SourceARN: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${websiteCFD}

  oacforCloudFront:  #https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html
    Type: AWS::CloudFront::OriginAccessControl #https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#oac-permission-to-access-s3
    Properties: 
      OriginAccessControlConfig: 
        Description: CloudFront OAC test
        Name: !Ref OACforCloudFront
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CFDACMCertificate: #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainNameJoin
      DomainValidationOptions: #automatic dns validation https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-certificatemanager-certificate-domainvalidationoption.html
        - DomainName: !Ref DomainNameJoin
          HostedZoneId: !Ref Route53HostedZoneID
      ValidationMethod: 'DNS'

  websiteCFD:
    Type: AWS::CloudFront::Distribution #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html
    Properties:
      DistributionConfig: #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-distributionconfig.html#cfn-cloudfront-distribution-distributionconfig-aliases
        Enabled: true
        Comment: Deploy a static website with AWS S3 plus CloudFront using CloudFormation
        Origins:
        - DomainName: !Sub ${S3BucketName}.s3.${AWS::Region}.amazonaws.com
          Id: oac-origin  #This needs to match line 121: DefaultCacheBehavior: TargetOriginId:
          S3OriginConfig: {} #OAI is legacy and while still required in the script is not useful for our purposes as we are using OAC
            # OriginAccessIdentity: '' #origin-access-controls/cloudfront/oacforCloudFront  #https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_S3OriginConfig.html
          OriginAccessControlId: !GetAtt oacforCloudFront.Id
          OriginShield:  
            Enabled: true
            OriginShieldRegion: us-east-1
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        ViewerCertificate:            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-viewercertificate.html
          AcmCertificateArn: !Ref CFDACMCertificate #Region: us-east-1 
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        HttpVersion: http2
        Aliases: #A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
          - Ref: DomainNameJoin
        CNAMEs: #Property description not available.
          - Ref: DomainNameJoin
        PriceClass: PriceClass_All
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          # CachePolicyId: S3CFDCFNCachePolicy #https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-cloudfront-headers.html
          Compress: false
          DefaultTTL: 2000 #20000 seconds = approx 5.5hours
          MaxTTL: 25000 #25000 = approx 7hours
          MinTTL: 0
          TargetOriginId: oac-origin   #This needs to match line 87: Origins:Id:
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
      Tags:
        - Key: 'Department'
          Value: 'Project 2 S3 with CloudFront Distribution'

  myDNS:
    Type: AWS::Route53::RecordSetGroup #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-route53.html
    Properties:
      HostedZoneId: !Ref Route53HostedZoneID
      RecordSets:
        - Name: !Ref DomainNameJoin
          Type: A
          AliasTarget: #https://github.com/awsdocs/aws-cloudformation-user-guide/blob/main/doc_source/quickref-route53.md
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt 
              - websiteCFD
              - DomainName 

Outputs:
  privateS3bucket:
    Description: Bucket created using this template
    Value: 
      Ref: S3BucketName
  BucketArn:
    Value: !Sub arn:aws:s3:::${S3BucketName}
  WebsiteURL:
    Value: !Sub https://${DomainNameJoin}
    Description: The URL of the newly created website