name: Minecraft Stack Control

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Start a stack or stop all?"
        required: true
        type: choice
        options:
          - start
          - stop
      stack_to_start:
        description: "Which stack to start (if action = start)?"
        required: false
        type: choice
        options:
          - Bens2ndServer
          - testlatestchanges

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-2
  ROLE_NAME: GitHubActionsOIDCRole
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  control-stack:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Start selected stack (if action is start)
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          echo "Starting stack: ${{ github.event.inputs.stack_to_start }}"
          aws cloudformation update-stack \
            --stack-name ${{ github.event.inputs.stack_to_start }} \
            --use-previous-template \
            --parameters ParameterKey=ServerState,ParameterValue=Running \
            --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for start to complete
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          aws cloudformation wait stack-update-complete \
            --stack-name ${{ github.event.inputs.stack_to_start }}

      - name: Get Public DNS of started stack
        if: ${{ github.event.inputs.action == 'start' }}
        run: |
          DNS=$(aws cloudformation describe-stacks \
            --stack-name ${{ github.event.inputs.stack_to_start }} \
            --query "Stacks[0].Outputs[?OutputKey=='PublicDNS'].OutputValue" \
            --output text)
          echo "Minecraft Server is live at: $DNS"

      - name: Stop both stacks (if action is stop)
        if: ${{ github.event.inputs.action == 'stop' }}
        run: |
          echo "Stopping both stacks..."
          for stack in Bens2ndServer testlatestchanges; do
            echo "Stopping $stack..."
            aws cloudformation update-stack \
              --stack-name $stack \
              --use-previous-template \
              --parameters ParameterKey=ServerState,ParameterValue=Stopped \
              --capabilities CAPABILITY_NAMED_IAM
          done

      - name: Wait for stop to complete
        if: ${{ github.event.inputs.action == 'stop' }}
        run: |
          for stack in Bens2ndServer testlatestchanges; do
            echo "Waiting for $stack to stop..."
            aws cloudformation wait stack-update-complete --stack-name $stack
          done
